Project Structure : 

1. Pipe : 
   > Validate data contained in the request

2. MessagesController : 
   > Route the request to a particular function 

3. MessagesService :
   > Run some business logic

4. Message Repository : 
   > Access a database   


Nest Generate Command : 
nest generate module messages
 
nest generate controller messages/messages --flat


Setting Up Automatic Validation 

1. Tell Nest to use global Validation.

2. Create a class that describes the different properties that the request body should have. 
Note : Data Transfer Object in short - DTO 

3. Add validation rules to the class.

4. Apply that class to the request handler.


Services : 

its a class 

place to put any business logic 

uses one or more Repository to find or store data

Repository :

its a class 

place to put storage-related logic 

Usually ends up being a TypeORM entity, a Mongoose schema, or similar 


Dependency Injection -- Why does it exist in Nest Js.

Inversion of Control Principle :

1. Classes should not create instances of its dependencies on its own.



DI Container Flow :

1. At startup , register all calsses with the container.
2. Container will figure out what each dependency each class has.
3. We then ask the container to create an instance of a class for us.
4. Container creates all required dependencies and give us the instance.
5. Container will hold onto the created dependency instance and reuse them if needed.